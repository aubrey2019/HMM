{\rtf1\ansi\ansicpg936\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 ArialMT;\f1\froman\fcharset0 Times-Roman;\f2\fmodern\fcharset0 CourierNewPSMT;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red16\green60\blue192;}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c6667\c33333\c80000;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl720\sa160\partightenfactor0

\f0\fs53\fsmilli26667 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Implementation
\f1\b\fs48 \
\pard\pardeftab720\sl400\partightenfactor0

\f0\b0\fs29\fsmilli14667 \cf2 To find the most likely trajectory in 11 time-steps, we need to determine initial possible states, start probability, transition probability and emission probability according to the {\field{\*\fldinst{HYPERLINK "https://en.wikipedia.org/wiki/Viterbi_algorithm#Example"}}{\fldrslt \cf3 \ul \ulc3 \strokec3 example of Viterbi algorithm - Wikipedia}}. List V stores possibilities of appearance for each entry in 10x10 grid in time 
\i t
\i0 . V[t] is a 10-by-10 2-d list of the possibilities. 
\f1\fs24 \

\f0\fs29\fsmilli14667 For t = 0, we check each cell in the grid with the first observation, i.e. the noisy distances to 4 towers, under the condition that each noisy distance d\'92 falls in the range [0.7d, 1.3d], in which d is the actual distance using Euclidean. We find 9 out of 100 cells fulfill the condition, and we assign emission possibility to each of them, otherwise assign 0. Since the start possibility for each of 9 cells is the same, we can assign them with 1\'92s. Then we initial path dictionary with each possible cell (i, j) as key and list of path [(i, j)].
\f1\fs24 \

\f0\fs29\fsmilli14667 For t > 0, we also need to check each cell with the t-th observation. For those who is the possible cell for time t, we further check the possibility of its last steps. For possible cell (i, j), generally the last steps could be (i-1, j), (i+1, j), (i, j-1), (i,j+1). Taking boundary and \'93walls\'94 represented by 0\'92s in the grid into account, some of possible last steps may be excluded. For each state of the remaining candidates, its probability = V[t-1][state] * transition_prob * emission_prob, where transition probability is 1/possible_directions_from_state, and emission probability is the product of probabilities on choosing the noise distance from set of numbers in [0.7d, 1.3d] with one decimal place for each d of 4 true distances. The one with maximum probability is the best possible last step to cell (i, j). Then V[t][(i, j)] stores the probability and path[(i, j)] stores the best path to (i, j). It may occur that multiple candidates have maximum probability, so we take the one with a smaller x coordinate, or a smaller y coordinate if the x coordinates are equal.
\f1\fs24 \

\f0\fs29\fsmilli14667 The final result of trajectory is:
\f1\fs24 \
\pard\pardeftab720\sl280\partightenfactor0
\cf2 \
\pard\pardeftab720\sl400\partightenfactor0

\f2\fs29\fsmilli14667 \cf2 [(5, 3), (6, 3), (7, 3), (8, 3), (8, 2), (7, 2), (7, 1), (6, 1), (5, 1), (4, 1), (3, 1)]
\f1\fs24 \
}